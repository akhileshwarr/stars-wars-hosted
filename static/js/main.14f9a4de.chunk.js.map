{"version":3,"sources":["context/theme.js","components/atoms/Container.js","components/atoms/Text.js","components/atoms/ThemeSwitch.js","components/atoms/SWButton.js","components/views/Home.js","store/actions.js","components/molecules/Card.js","components/views/People.js","App.js","serviceWorker.js","store/reducers.js","index.js"],"names":["themes","light","foreground","background","backgroundCard","dark","ThemeContext","React","createContext","Container","children","theme","useContext","className","Typography","component","style","backgroundColor","minHeight","defaultProps","Text","color","ThemeSwitch","checked","toggleTheme","Switch","onChange","name","inputProps","SWButton","handleSWClick","disabled","Button","size","variant","onClick","Home","dispatch","useDispatch","useCallback","type","people","peopleData","Grid","container","spacing","padding","item","xs","display","to","justifySelf","undefined","useStyles","makeStyles","root","minWidth","bullet","margin","transform","title","fontSize","pos","marginBottom","Card","person","classes","handleFilmClick","personUrl","url","filimDetails","films1","films2","CardContent","height","gender","map","film","i","Fragment","key","director","films","a","CardActions","People","peopleState","useSelector","state","float","results","App","themeState","toggleThemeHandler","e","value","Provider","exact","path","render","props","Boolean","window","location","hostname","match","updateFilimDetals","action","combineReducers","next","store","createStore","rootReducer","applyMiddleware","thunk","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.14f9a4de.chunk.js","sourcesContent":["import React from 'react';\n\nexport const themes = {\n    light: {\n      foreground: \"#000000\",\n      background: \"#eeeeee\",\n      backgroundCard: \"gray\"\n    },\n    dark: {\n      foreground: \"#ffffff\",\n      background: \"#222222\",\n      backgroundCard: \"black\"\n\n    }\n  };\n  \n  export const ThemeContext = React.createContext(themes.dark);\n\n   \n","import React, { useContext } from 'react';\nimport { ThemeContext } from '../../context/theme';\nimport MetContainer from '@material-ui/core/Container';\nimport Typography from '@material-ui/core/Typography';\nimport PropTypes from 'prop-types';\nimport './container.css';\n\nexport const Container = ({children}) => {\n\n    const theme = useContext(ThemeContext);\n\n    return (\n        <MetContainer className = 'basic-container-max-width'>\n            <Typography component=\"div\" style={{ backgroundColor: theme.background , minHeight: '102vh'  }} >\n                {children}\n            </Typography>\n      </MetContainer>\n    );\n  };\n  \n  Container.propTypes = {\n    children: PropTypes.array\n\n  };\n  \n  Container.defaultProps = {\n    children: []\n  };\n  ","import React, { useContext } from 'react';\nimport { ThemeContext } from '../../context/theme';\nimport PropTypes from 'prop-types';\n\nexport const Text = ({children }) => {\n\n    const theme = useContext(ThemeContext);\n\n    return (\n        <span className = \"genralSpan\" style = {{color:theme.foreground}}>{children}</span>\n    );\n  };\n\n  Text.propTypes = {\n    children:  PropTypes.oneOfType([\n      PropTypes.string,\n      PropTypes.array\n    ])\n  };\n  \n  Text.defaultProps = {\n    children: null\n  };","import React from 'react';\nimport Switch from '@material-ui/core/Switch';\nimport PropTypes from 'prop-types';\n\nexport const ThemeSwitch = ({checked, toggleTheme }) => {\n\n    return (\n        <Switch\n        checked={checked}\n        onChange={toggleTheme}\n        color=\"primary\"\n        name=\"themeToggle\"\n        inputProps={{ 'aria-label': 'theme selector' }}\n      />\n    );\n  };\n\n  ThemeSwitch.propTypes = {\n    checked: PropTypes.bool.isRequired,\n    toggleTheme: PropTypes.func.isRequired\n  };\n  \n  ThemeSwitch.defaultProps = {\n    checked: false,\n    toggleTheme: ()=>{} \n  };\n  ","import Button from '@material-ui/core/Button';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nexport const SWButton = ({\n    children,\n    style = {},\n    handleSWClick = () => {},\n    disabled = false\n }) => {\n\n    return (\n        <Button\n        size=\"large\"\n        variant=\"contained\"\n        color=\"primary\"\n        style = {{...style}}\n        onClick = {handleSWClick}\n        disabled = {disabled}\n      >\n          {children}\n          </Button>\n    );\n  };\n\n  SWButton.propTypes = {\n    children: PropTypes.element,\n    style: PropTypes.object,\n    handleSWClick:PropTypes.func,\n    disabled: PropTypes.bool\n  };\n  \n  SWButton.defaultProps = {\n    children: null,\n    style: {},\n    handleSWClick:null,\n    disabled: false\n\n  };\n  ","import React, { useCallback } from 'react';\nimport { Container } from '../atoms/Container';\nimport { Text } from '../atoms/Text';\nimport {  ThemeSwitch } from '../atoms/ThemeSwitch';\nimport {  SWButton } from '../atoms/SWButton';\nimport { Link } from 'react-router-dom';\nimport Grid from '@material-ui/core/Grid';\nimport PropTypes from 'prop-types';\nimport { useDispatch } from \"react-redux\";\nimport { fetchPeople } from \"../../store/actions\"\n\nexport const Home = ({checked,toggleTheme}) => {\n    const dispatch = useDispatch()\n    const handleSWClick = useCallback(\n        () => dispatch(fetchPeople()),\n        [dispatch]\n      )\n    return (\n        <Container>\n             <Grid container spacing={3} style = {{padding : \"5%\"}}>\n                <Grid item xs={12}>\n                    <div >\n                    <Text> toggle theme </Text> \n                    <ThemeSwitch checked = {checked} toggleTheme = {toggleTheme} />\n                    </div>\n                </Grid>\n                <Grid item xs={12} style = {{display:'grid'}}>\n                    <Link to = '/people' style = {{justifySelf:'center'}} >\n                        <SWButton handleSWClick = {handleSWClick}> \n                            <Text>STAR WARS GALLERY</Text>\n                        </SWButton>\n                    </Link>\n                </Grid>\n             </Grid>\n        </Container>\n    );\n  };\n  \n  Home.propTypes = {\n    checked: PropTypes.bool.isRequired,\n    toggleTheme: PropTypes.func.isRequired\n  };\n  \n  Home.defaultProps = {\n    checked: false,\n    toggleTheme: undefined \n  };\n  ","import peopleData from '../assets/people.json';\n\nimport films1 from '../assets/films1.json';\nimport films2 from '../assets/films2.json';\n\nexport const toggleTheme = checked => ({\n    type: 'TOGGLE_THEME',\n    checked\n  })\n\n  export const fetchPeople = () => ({\n    type: 'FETCH_PEOPLE',\n    people: peopleData\n  })\n\n  export const fetchFilim = personUrl => ({\n    type: 'FETCH_FILIM',\n    filimDetails: [ films1,films2 ],\n    personUrl: personUrl\n  })","import React,  { useContext, useCallback } from 'react';\nimport { makeStyles } from '@material-ui/core/styles';\nimport CardMet from '@material-ui/core/Card';\nimport CardActions from '@material-ui/core/CardActions';\nimport CardContent from '@material-ui/core/CardContent';\nimport Typography from '@material-ui/core/Typography';\nimport { Text } from '../atoms/Text';\nimport { ThemeContext } from '../../context/theme';\nimport { SWButton as Button } from '../atoms/SWButton'\nimport { useDispatch } from \"react-redux\";\nimport { fetchFilim } from '../../store/actions'\nimport PropTypes from 'prop-types';\n\n\nconst useStyles = makeStyles({\n  root: {\n    minWidth: 275,\n  },\n  bullet: {\n    display: 'inline-block',\n    margin: '0 2px',\n    transform: 'scale(0.8)',\n  },\n  title: {\n    fontSize: 14,\n  },\n  pos: {\n    marginBottom: 12,\n  },\n});\n\nexport const  Card = ({person}) => {\n\n  const theme = useContext(ThemeContext);\n  const classes = useStyles();\n  const dispatch = useDispatch()\n  const handleFilmClick = useCallback(\n      () => dispatch(fetchFilim(person.url)),\n      [dispatch]\n    )\n  return (\n    <CardMet className={classes.root} style = {{backgroundColor: theme.backgroundCard }}>\n      <CardContent>\n        <Typography  color=\"textSecondary\"  variant=\"h5\" component=\"h2\">\n            <Text>{person.name}</Text>\n        </Typography>\n        <Typography className={classes.title} >\n          <Text>Height : {person.height}</Text> \n        </Typography>\n        <Typography className={classes.pos} color=\"textSecondary\">\n            <Text> Gender : {person.gender}</Text>\n        </Typography>\n        <Typography variant=\"body2\" component=\"p\">\n            <Text>Films:</Text> <br />\n            {\n              person.filimDetails ? \n                person.filimDetails.map((film,i) =>  \n                  <React.Fragment key = {i}>\n                    <Text>{`Film${i} : `}</Text>\n                    <br/>\n                    <Text>{\"Title : \"}{film.title}</Text>\n                    <br/>\n                    <Text>{\"Director : \"}{film.director}</Text>\n                    <br/>\n                    <Text>{\"producer : \"}{film.director}</Text>\n                    <br/>\n                  </React.Fragment>\n                )\n                :person.films.map((a,i) => <React.Fragment key = {i}>\n                    <Text>{a}</Text>\n                    <br/>\n                    </React.Fragment>)\n                }\n        </Typography>\n      </CardContent>\n      <CardActions>\n        <Button handleSWClick = {handleFilmClick} disabled = { person.filimDetails ? true : false } > \n          <Text>Learn More</Text>\n        </Button>\n      </CardActions>\n    </CardMet>\n  );\n}\n\nCard.propTypes = {\n  person: PropTypes.object\n};\n\nCard.defaultProps = {\n  person: {},\n \n};\n","import React from 'react';\n  import { Container } from '../atoms/Container'\nimport { useSelector } from \"react-redux\";\nimport { Card } from '../molecules/Card'\nimport { Link } from 'react-router-dom';\nimport {  ThemeSwitch } from '../atoms/ThemeSwitch';\n\nimport Grid from '@material-ui/core/Grid';\nimport { Text } from '../atoms/Text'\nimport {  SWButton } from '../atoms/SWButton'\n\nimport PropTypes from 'prop-types';\n\n\nexport const People =  ({checked,toggleTheme}) => {\n  const peopleState = useSelector(state => state.peopleState)\n    return <Container>\n              <Grid container spacing={3} style = {{padding : \"5%\"}}>\n                  <Grid item xs={12} style = {{display:'grid'}}>\n                    <div style = {{float:'right'}}>\n                      <Text> toggle theme </Text> \n                      <ThemeSwitch checked = {checked} toggleTheme = {toggleTheme} />\n                    </div>\n                  </Grid> \n                  <Grid item xs={12} style = {{display:'grid'}}>\n                      <Link to = '/home' style = {{justifySelf:'center'}} >\n                            <SWButton > \n                                <Text>STAR WARS HOME</Text>\n                            </SWButton>\n                        </Link>\n                  </Grid> \n                  { peopleState.results.map((person) => \n                    <Grid item xs={3}>\n                        <Card person = {person}/>\n                      </Grid>\n                      )}\n                </Grid>     \n           </Container>  \n  };\n  \n  People.propTypes = {\n    checked: PropTypes.bool.isRequired,\n    toggleTheme: PropTypes.func.isRequired\n  };\n  \n  People.defaultProps = {\n    checked: false,\n    toggleTheme: undefined \n  };\n  ","import React from 'react';\nimport { BrowserRouter as Router, Route, Switch, Redirect } from 'react-router-dom'\nimport { Home } from './components/views/Home' \nimport { People } from './components/views/People' \nimport { ThemeContext, themes } from './context/theme';\n\nimport { useDispatch, useSelector } from \"react-redux\";\n\nimport { toggleTheme } from './store/actions'\nconst App = () => {\n\n  const checked = useSelector(state => state.themeState);\n  const dispatch = useDispatch();\n  const toggleThemeHandler  = (e,value) => {\n    dispatch(toggleTheme(value))\n  }\n  \n  return(\n    <ThemeContext.Provider value = {checked ? themes.light : themes.dark}>\n      <Router>\n        <Switch>\n          <Route exact path=\"/\" render={()=><Redirect to=\"/home\"/>}/>\n          <Route path=\"/home\" render = {(props)=> <Home  checked = {checked} toggleTheme = {toggleThemeHandler} {...props}/>} />\n          <Route path=\"/people\" render = {(props)=> <People  checked = {checked} toggleTheme = {toggleThemeHandler} {...props}/>} />\n        </Switch>\n      </Router>\n  </ThemeContext.Provider>\n  )\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import { combineReducers } from 'redux'\n\nconst themeState = (state = false, action) => {\n    switch (action.type) {\n      case 'TOGGLE_THEME':\n        return action.checked\n      default:\n        return state\n    }\n  }\n\n  const updateFilimDetals = (state,action) => {\n    return  state.results.map((person)=>{\n      if(person.url === action.personUrl){\n        return {...person, filimDetails: action.filimDetails}\n      }\n        return person\n    })\n    \n  }\n  \n  const peopleState = (state = { \"next\": null,\nresults:[] },action) => {\n    switch (action.type) {\n      case 'FETCH_PEOPLE':\n        return { \n          next : action.people.next,\n        results : action.people.results\n        }\n      case 'FETCH_FILIM':\n        return {\n          ...state,\n          results : updateFilimDetals(state,action)\n        }   \n      default:\n        return state\n    }\n  }\n\n  export default combineReducers({ themeState, peopleState })","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { createStore, applyMiddleware } from 'redux'\nimport { Provider } from 'react-redux'\nimport rootReducer from './store/reducers'\nimport thunk from 'redux-thunk';\n\nconst store = createStore(rootReducer, applyMiddleware(thunk))\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n    <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}